plugins {
    id "com.netflix.nebula.node" version "3.0.0" apply false
    id "io.spring.dependency-management" version "1.1.6" apply false
    id 'test-report-aggregation'
}

ext {
    intygClinicalprocessSchemasVersion = "1.0.24.2"
    intygClinicalprocessSchematronVersion = "1.0.57.2"
    intygTransportstyrelsenSchemasVersion = "1.0.5.2"
    rivtaClinicalprocessSchemasVersion = "4.0.5.3"
    rivtaInsuranceprocessSchemasVersion = "3.1.0.5.2"
    schemasContractVersion = "2.1.8.2"

    autovalueVersion = "1.10.4"
    cxfVersion = "4.0.3"
    commonsCollectionsVersion = "4.4"
    commonsTextVersion = "1.10.0"
    commonsCsvVersion = "1.10.0"
    commonsIoVersion = "2.14.0"
    equalsVerifierVersion = "3.15.2"
    guavaVersion = "32.1.3-jre"
    itextVersion = "5.5.13.3"
    itext7Version = "7.2.5"
    itextPdfHtmlVersion = "4.0.5"
    jakartaJwsApiVersion = "3.0.0"
    jaxb2Version = "3.0.0"
    nashornVersion = "15.4"
    phSchematronVersion = "7.1.2"
    saxonVersion = "12.3"
    spotbugsAnnotationVersion = "4.8.0"

    springbootMavenBomVersion = "3.3.4"
}

allprojects {
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'idea'

    group = 'se.inera.intyg.common'
    version = System.properties['buildVersion'] ?: '4.0.0-SNAPSHOT'
    sourceCompatibility = 21
    targetCompatibility = 21

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}"
        }
    }

    dependencies {
        implementation "ch.qos.logback:logback-classic"
        implementation "jakarta.annotation:jakarta.annotation-api"
        implementation "jakarta.jws:jakarta.jws-api:${jakartaJwsApiVersion}"
        implementation "jakarta.xml.ws:jakarta.xml.ws-api"

        testImplementation "com.sun.xml.messaging.saaj:saaj-impl"
        testImplementation "junit:junit"
        testImplementation "org.assertj:assertj-core"
        testImplementation "org.glassfish.jaxb:jaxb-runtime"
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.mockito:mockito-junit-jupiter"
        testImplementation "org.mockito:mockito-core"
        testImplementation "org.skyscreamer:jsonassert"
        testImplementation "org.springframework:spring-test"
        testImplementation "org.xmlunit:xmlunit-core"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    }

    tasks.register('packageTests', Jar) {
        from sourceSets.test.output
        archiveClassifier.set('tests')
    }

    tasks.register('install') {
        description("Publishes artifact to local maven repository.")
        dependsOn(publishToMavenLocal)
    }

    artifacts.archives packageTests
    compileJava.options.encoding = 'UTF-8'
    jar { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }
    test { useJUnitPlatform() }

    repositories {
        mavenLocal()
        maven { url "https://nexus.drift.inera.se/repository/it-public/" }
        mavenCentral {
            content {
                excludeGroupByRegex "se\\.inera.*"
            }
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
        repositories.maven {
            url = uri("https://nexus.drift.inera.se/repository/maven-releases/")
            credentials {
                username = System.properties['ineraNexusUsername']
                password = System.properties['ineraNexusPassword']
            }
        }
    }

    idea {
        module {
            downloadJavadoc = true
        }
    }

    configurations {
        // Remove these due to conflict with Spring SAML which uses bcprov-jdk15.
        implementation.exclude group: "org.bouncycastle", module: "bcpkix-jdk15on"
        implementation.exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
    }
}

subprojects.collect {subproject -> subproject.name }.each { subprojectName ->
    dependencies { testReportAggregation project(":${subprojectName}") }
}