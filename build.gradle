plugins {
    id "se.inera.intyg.plugin.common" version "3.1.4" apply false
    id "com.moowork.node" version "1.3.1" apply false
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
}

ext {
    intygClinicalprocessSchematronVersion = "1.0.57"
    intygClinicalprocessSchemasVersion = "1.0.24"
    intygTransportstyrelsenSchemasVersion = "1.0.5"
    rivtaClinicalprocessSchemasVersion = "4.0.5"
    rivtaInsuranceprocessSchemasVersion = "3.1.0.5"

    schemasContractVersion = "2.1.8"

    autovalueVersion = "1.7"
    cxfVersion = "3.2.4"
    commonsCollectionsVersion = "4.4"
    commonsTextVersion = "1.8"
    commonsIoVersion = "2.6"
    guavaVersion = "28.2-jre"
    itextVersion = "5.5.13" //5.5.13.1 not working (tests never finishes)
    itext7Version = "7.1.10"
    itextPdfHtmlVersion = "2.1.7"
    jakartaJwsApiVersion = "2.1.0"
    phSchematronVersion = "5.5.0"
    saxonVersion = "9.9.1-6"

    unitilsCoreVersion = "3.4.6"
    equalsVerifierVersion = "3.1.12"

    nodeJsVersion = "10.16.2"
    npmVersion = "6.10.3"

    springbootMavenBomVersion = "2.2.5.RELEASE"
}

allprojects {
    apply plugin: 'se.inera.intyg.plugin.common'
    apply plugin: 'maven'
    apply plugin: 'idea'

    idea {
        module {
            excludeDirs += file('bower_components')
            excludeDirs += file('node_modules')
        }
    }

    repositories {
        mavenLocal()
        maven { url "https://nexus.drift.inera.se/repository/it-public/" }
        mavenCentral {
            content {
                // this repository contains everything BUT artifacts with group starting with "se.inera"
                excludeGroupByRegex "se\\.inera.*"
            }
        }
    }

    configurations {
        // Remove these due to conflict with Spring SAML which uses bcprov-jdk15.
        compile.exclude group: "org.bouncycastle", module: "bcpkix-jdk15on"
        compile.exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
    }

    apply plugin: "io.spring.dependency-management"

    test {
        useJUnitPlatform()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}"
        }
    }

    dependencies {
        compile "javax.annotation:javax.annotation-api"
        compile "jakarta.xml.bind:jakarta.xml.bind-api"
        compile "jakarta.xml.ws:jakarta.xml.ws-api"
        compile "jakarta.jws:jakarta.jws-api:${jakartaJwsApiVersion}"
        testCompile "org.glassfish.jaxb:jaxb-runtime"
        testCompile "com.sun.xml.messaging.saaj:saaj-impl"

        testCompile "junit:junit:4.13"
        testCompile "org.junit.jupiter:junit-jupiter-api"
        testCompile "org.junit.jupiter:junit-jupiter-params"
        testCompile "org.mockito:mockito-junit-jupiter"
        testCompile "org.mockito:mockito-core"
        testCompile "org.skyscreamer:jsonassert"
        testCompile "org.springframework:spring-test"
        testCompile "org.unitils:unitils-core:${unitilsCoreVersion}"
        testCompile "org.xmlunit:xmlunit-core"
        testCompile "nl.jqno.equalsverifier:equalsverifier:${equalsVerifierVersion}"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    }

    group = 'se.inera.intyg.common'
    version = System.properties['buildVersion'] ?: '3.17.0-SNAPSHOT'

    compileJava.options.encoding = 'UTF-8'

    sourceCompatibility = 11
    targetCompatibility = 11

    task createVersionPropertyFile(type: VersionPropertyFileTask)

    task packageTests(type: Jar) {
        from sourceSets.test.output
        classifier = 'tests'
    }
    artifacts.archives packageTests

    uploadArchives.repositories.mavenDeployer {
        repository(url: "https://nexus.drift.inera.se/repository/maven-releases/") {
            authentication(userName: System.properties['ineraNexusUsername'], password: System.properties['ineraNexusPassword'])
        }
    }
}

configure(subprojects.findAll {
    ['fk7263', 'ts-bas', 'ts-diabetes', 'ts-diabetes-2', 'tstrk1062', 'lisjp', 'luse', 'luae_fs', 'luae_na', 'db', 'doi', 'af00213', 'af00251', 'ag114', 'ag7804', 'tstrk1009'].contains(it.name)
}) {

    apply plugin: 'com.moowork.grunt'

    grunt {
        colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
    }

    node {
        version = "${nodeJsVersion}"
        npmVersion = "${npmVersion}"
        download = true
        distBaseUrl = 'https://nodejs.org/dist/'
        workDir = file("${projectDir}/.gradle/nodejs")
        npmWorkDir = file("${projectDir}/.gradle/npm")
        nodeModulesDir = rootProject.projectDir
    }

    task jsInclude(type: NodeTask, dependsOn: [npmInstall]) {
        def webappOutputDir = 'build/'

        inputs.dir("$projectDir/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--intygModule=${project.name}",
                "--outputDir=${webappOutputDir}", "--npmDir=${rootProject.projectDir}", 'default']
    }

    jar.dependsOn(jsInclude)

    task unzipBuildTools(type: Copy) {
        into "${rootProject.buildDir}/build-tools/"
        from {
            def intygJar = project.rootProject.buildscript.configurations.classpath.find {
                it.name.contains("se.inera.intyg.plugin.common")
            }
            zipTree(intygJar)
        }
    }

    task jsCodeQuality(type: NodeTask, dependsOn: [npmInstall, unzipBuildTools]) {
        outputs.upToDateWhen { false }

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--intygModule=${project.name}",
                "--npmDir=${rootProject.projectDir}", 'lint']
    }

    jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }

    jar {
        exclude '**/*.scss'
        exclude '**/*.spec.js'
        exclude '**/*.test.js'
        exclude '**/karma*.conf.js'
        exclude '**/karma*.conf.ci.js'
    }

    afterEvaluate {
        checkstyleMain.dependsOn jsCodeQuality
    }
}

configure(subprojects.findAll {
    ['fk7263', 'ts-bas', 'ts-diabetes', 'tstrk1062', 'lisjp', 'af00213', 'af00251'].contains(it.name)
}) {
    configurations {
        jstests
    }

    dependencies {
        jstests project(':common-web')
    }

    task unzipWebjars(type: Copy, dependsOn: ":common-web:build") {
        description 'Copies common-web from the classpath and expands it so that we can use their static resources with karma'
        into "$buildDir/webjars/"
        from {
            configurations.jstests.collect { zipTree(it) }
        }
    }

    task jsTests(type: NodeTask, dependsOn: [npmInstall, unzipWebjars]) {
        def webappTestOutputDir = 'build/karma/'

        inputs.dir("${projectDir}/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappTestOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--intygModule=${project.name}",
                "--outputDir=${webappTestOutputDir}", "--npmDir=${rootProject.projectDir}", 'test']
    }

    test.dependsOn(jsTests)
}

task tagRelease(type: TagReleaseTask)
