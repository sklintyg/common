plugins {
    id "se.inera.intyg.plugin.common" version "2.0.11" apply false
    id "com.moowork.node" version "1.3.1" apply false
}

ext {
    intygClinicalprocessSchematronVersion = "1.0.48"
    intygClinicalprocessSchemasVersion = "1.0.23"
    intygTransportstyrelsenSchemasVersion = "1.0.5"
    rivtaClinicalprocessSchemasVersion = "4.0.5"
    rivtaInsuranceprocessSchemasVersion = "3.1.0.5"

    schemasContractVersion = "2.1.8"

    autovalueVersion = "1.5"
    cxfVersion = "3.2.4"
    fkEIntygAdapterVersion = "2.2-RC3-INTYG"
    guavaVersion = "24.1-jre"
    commonsCollectionsVersion = "4.2"
    commonsLang3Version = "3.8.1"
    commonsTextVersion = "1.6"
    commonsIoVersion = "2.4"
    itextVersion = "5.5.8"
    itext7Version = "7.1.7"
    itextPdfHtmlVersion = "2.1.4"
    jacksonVersion = "2.9.7"
    logbackVersion = "1.2.3"
    phSchematronVersion = "3.0.1"
    saxonVersion = "9.8.0-10"
    servletApiVersion = "2.5"
    springVersion = "4.3.16.RELEASE"

    jsonAssertVersion = "1.2.0"
    mockitoVersion = "2.16.0"
    unitilsCoreVersion = "3.4.6"
    xmlUnitVersion = "2.6.2"
    equalsVerifierVersion = "2.5.2"
    assertjVersion = "3.6.2"

    nodeJsVersion = "10.16.2"
    npmVersion = "6.10.3"
}

allprojects {
    apply plugin: 'se.inera.intyg.plugin.common'
    apply plugin: 'maven'
    apply plugin: 'idea'

    idea {
        module {
            excludeDirs += file('bower_components')
            excludeDirs += file('node_modules')
        }
    }

    repositories {
        mavenLocal()
        maven { url "https://build-inera.nordicmedtest.se/nexus/repository/public/" }
        jcenter {
            content {
                // this repository contains everything BUT artifacts with group starting with "se.inera"
                excludeGroupByRegex "se\\.inera.*"
            }
        }
    }

    dependencies {
        testCompile "junit:junit:4.+"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile "org.skyscreamer:jsonassert:${jsonAssertVersion}"
        testCompile "org.springframework:spring-test:${springVersion}"
        testCompile "org.unitils:unitils-core:${unitilsCoreVersion}"
        testCompile "org.xmlunit:xmlunit-core:${xmlUnitVersion}"
        testCompile "nl.jqno.equalsverifier:equalsverifier:${equalsVerifierVersion}"
    }

    group = 'se.inera.intyg.common'
    version = System.properties['buildVersion'] ?: '0-SNAPSHOT'

    compileJava.options.encoding = 'UTF-8'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task createVersionPropertyFile(type: VersionPropertyFileTask)

    task packageTests(type: Jar) {
        from sourceSets.test.output
        classifier = 'tests'
    }
    artifacts.archives packageTests

    uploadArchives.repositories.mavenDeployer {
        repository(url: "https://build-inera.nordicmedtest.se/nexus/repository/releases/") {
            authentication(userName: System.properties['nexusUsername'], password: System.properties['nexusPassword'])
        }
    }
}

configure(subprojects.findAll {
    ['fk7263', 'ts-bas', 'ts-diabetes', 'ts-diabetes-2', 'tstrk1062', 'lisjp', 'luse', 'luae_fs', 'luae_na', 'db', 'doi', 'af00213', 'af00251', 'ag114', 'ag7804', 'tstrk1009'].contains(it.name)
}) {

    apply plugin: 'com.moowork.grunt'

    grunt {
        colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
    }

    node {
        version = "${nodeJsVersion}"
        npmVersion = "${npmVersion}"
        download = true
        distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
        workDir = file("${projectDir}/.gradle/nodejs")
        npmWorkDir = file("${projectDir}/.gradle/npm")
        nodeModulesDir = rootProject.projectDir
    }

    task jsInclude(type: NodeTask, dependsOn: [npmInstall]) {
        def webappOutputDir = 'build/'

        inputs.dir("$projectDir/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--intygModule=${project.name}",
                "--outputDir=${webappOutputDir}", "--npmDir=${rootProject.projectDir}", 'default']
    }

    jar.dependsOn(jsInclude)

    task unzipBuildTools(type: Copy) {
        into "${rootProject.buildDir}/build-tools/"
        from {
            def intygJar = project.rootProject.buildscript.configurations.classpath.find {
                it.name.contains("se.inera.intyg.plugin.common")
            }
            zipTree(intygJar)
        }
    }

    task jsCodeQuality(type: NodeTask, dependsOn: [npmInstall, unzipBuildTools]) {
        outputs.upToDateWhen { false }

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--intygModule=${project.name}",
                "--npmDir=${rootProject.projectDir}", 'lint']
    }

    jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }

    jar {
        exclude '**/*.scss'
        exclude '**/*.spec.js'
        exclude '**/*.test.js'
        exclude '**/karma*.conf.js'
        exclude '**/karma*.conf.ci.js'
    }

    afterEvaluate {
        checkstyleMain.dependsOn jsCodeQuality
    }
}

configure(subprojects.findAll {
    ['fk7263', 'ts-bas', 'ts-diabetes', 'tstrk1062', 'lisjp', 'af00213', 'af00251'].contains(it.name)
}) {
    configurations {
        jstests
    }

    dependencies {
        jstests project(':common-web')
    }

    task unzipWebjars(type: Copy, dependsOn: ":common-web:build") {
        description 'Copies common-web from the classpath and expands it so that we can use their static resources with karma'
        into "$buildDir/webjars/"
        from {
            configurations.jstests.collect { zipTree(it) }
        }
    }

    task jsTests(type: NodeTask, dependsOn: [npmInstall, unzipWebjars]) {
        def webappTestOutputDir = 'build/karma/'

        inputs.dir("${projectDir}/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappTestOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--intygModule=${project.name}",
                "--outputDir=${webappTestOutputDir}", "--npmDir=${rootProject.projectDir}", 'test']
    }

    test.dependsOn(jsTests)
}

task tagRelease(type: TagReleaseTask)
