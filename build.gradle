plugins {
    id "se.inera.intyg.plugin.common" version "1.0.61" apply false
    id "net.ltgt.apt" version "0.13" apply false
    id "com.moowork.node" version "1.1.1" apply false
}

ext {
    intygClinicalprocessSchematronVersion = "1.0.24"
    intygCertificateSchemasVersion = "1.0.9"
    intygTransportstyrelsenSchemasVersion = "1.0.4"
    rivtaClinicalprocessSchemasVersion = "3.2.0-RC1"
    rivtaInsuranceprocessSchemasVersion = "3.1.0.4"

    schemasContractVersion = "2.1.5"

    autovalueVersion = "1.5"
    cxfVersion = "3.1.3"
    fkEIntygAdapterVersion = "2.2-RC3-INTYG"
    guavaVersion = "20.0"
    itextVersion = "5.3.2"
    jacksonVersion = "2.8.1"
    logbackVersion = "1.0.11"
    phSchematronVersion = "3.0.1"
    saxonVersion = "9.6.0-4"
    servletApiVersion = "2.5"
    springVersion = "4.2.2.RELEASE"

    jsonAssertVersion = "1.2.0"
    mockitoVersion = "1.9.0"
    unitilsCoreVersion = "3.3"
    xmlUnitVersion = "1.4"
}

allprojects {
    apply plugin: 'se.inera.intyg.plugin.common'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'net.ltgt.apt'

    repositories {
        mavenLocal()
        maven { url "https://build-inera.nordicmedtest.se/nexus/repository/releases/" }
        maven { url "http://repo.maven.apache.org/maven2" }
    }

    dependencies {
        testCompile "junit:junit:4.+"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile "org.skyscreamer:jsonassert:${jsonAssertVersion}"
        testCompile "org.springframework:spring-test:${springVersion}"
        testCompile "org.unitils:unitils-core:${unitilsCoreVersion}"
        testCompile "xmlunit:xmlunit:${xmlUnitVersion}"
    }

    group = 'se.inera.intyg.common'
    version = System.properties['buildVersion'] ?: '0-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task createVersionPropertyFile(type: VersionPropertyFileTask)

    task packageTests(type: Jar) {
        from sourceSets.test.output
        classifier = 'tests'
    }
    artifacts.archives packageTests

    uploadArchives.repositories.mavenDeployer {
        repository(url: "https://build-inera.nordicmedtest.se/nexus/repository/releases/") {
            authentication(userName: System.properties['nexusUsername'], password: System.properties['nexusPassword'])
        }
    }
}

configure(subprojects.findAll {['fk7263', 'ts-bas', 'ts-diabetes', 'lisjp', 'luse', 'luae_fs', 'luae_na', 'db', 'doi'].contains(it.name)}) {
    apply plugin: 'com.moowork.grunt'

    grunt {
        colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
    }

    node {
        version = '6.11.3'
        download = true
        distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
        workDir = rootProject.projectDir
        nodeModulesDir = rootProject.projectDir
    }

    task jsInclude(type: NodeTask, dependsOn: [npmInstall]) {
        def webappOutputDir = 'build/'

        inputs.dir("$projectDir/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--module=${project.name}",
                "--outputDir=${webappOutputDir}", "--npmDir=${rootProject.projectDir}", 'default']
    }

    jar.dependsOn(jsInclude)

    task unzipBuildTools(type: Copy) {
        into "${rootProject.buildDir}/build-tools/"
        from {
            def intygJar = project.rootProject.buildscript.configurations.classpath.find { it.name.contains("se.inera.intyg.plugin.common") }
            zipTree(intygJar)
        }
    }

    task jsCodeQuality(type: NodeTask, dependsOn: [npmInstall, unzipBuildTools]) {
        outputs.upToDateWhen { false }

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--module=${project.name}",
                "--npmDir=${rootProject.projectDir}", 'lint']
    }

    jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }

    jar {
        exclude '**/*.scss'
        exclude '**/*.spec.js'
        exclude '**/*.test.js'
        exclude '**/karma*.conf.js'
        exclude '**/karma*.conf.ci.js'
    }

    afterEvaluate {
        checkstyleMain.dependsOn jsCodeQuality
    }
}

configure(subprojects.findAll { ['fk7263', 'ts-bas', 'ts-diabetes', 'lisjp'].contains(it.name) }) {
    configurations {
        jstests
    }

    dependencies {
        jstests project(':common-web')
    }

    task unzipWebjars(type: Copy, dependsOn: ":common-web:build") {
        description 'Copies common-web from the classpath and expands it so that we can use their static resources with karma'
        into "$buildDir/webjars/"
        from {
            configurations.jstests.collect { zipTree(it) }
        }
    }

    task jsTests(type: NodeTask, dependsOn: [npmInstall, unzipWebjars]) {
        def webappTestOutputDir = 'build/karma/'

        inputs.dir("${projectDir}/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappTestOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--module=${project.name}",
                "--outputDir=${webappTestOutputDir}", "--npmDir=${rootProject.projectDir}", 'test']
    }

    test.dependsOn(jsTests)
}

task tagRelease(type: TagReleaseTask)
