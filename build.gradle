import se.inera.intyg.IntygPluginKt

import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id "se.inera.intyg.plugin.common" version "3.3.1" apply false
    id "com.netflix.nebula.node" version "3.0.0" apply false
    id "io.spring.dependency-management" version "1.1.3" apply false
    id 'test-report-aggregation'
}

ext {
    intygClinicalprocessSchemasVersion = "1.0.24.1"
    intygClinicalprocessSchematronVersion = "1.0.57.1"
    intygTransportstyrelsenSchemasVersion = "1.0.5.1"
    rivtaClinicalprocessSchemasVersion = "4.0.5.2"
    rivtaInsuranceprocessSchemasVersion = "3.1.0.5.1"
    schemasContractVersion = "2.1.8.1"

    autovalueVersion = "1.10.4"
    cxfVersion = "3.6.2"
    commonsCollectionsVersion = "4.4"
    commonsTextVersion = "1.10.0"
    commonsCsvVersion = "1.10.0"
    commonsIoVersion = "2.14.0"
    equalsVerifierVersion = "3.15.2"
    guavaVersion = "32.1.3-jre"
    itextVersion = "5.5.13.3"
    itext7Version = "7.2.5"
    itextPdfHtmlVersion = "4.0.5"
    jakartaJwsApiVersion = "2.1.0" // version 3.0.0 -> warning: "class file for javax.jws.soap.SOAPBinding$ParameterStyle not found"
    jaxb2Version = "0.13.1"
    phSchematronVersion = "5.6.5"
    saxonVersion = "12.3"
    spotbugsAnnotationVersion = "4.8.0"

    nodeJsVersion = "12.22.12"
    npmVersion = "6.14.16"

    springbootMavenBomVersion = "2.7.17"
}

allprojects {
    apply plugin: 'se.inera.intyg.plugin.common'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'idea'

    group = 'se.inera.intyg.common'
    version = System.properties['buildVersion'] ?: '3.21.0-SNAPSHOT'
    sourceCompatibility = 11
    targetCompatibility = 11

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}"
        }
    }

    dependencies {
        implementation "ch.qos.logback:logback-classic"
        implementation "jakarta.annotation:jakarta.annotation-api"
        implementation "jakarta.jws:jakarta.jws-api:${jakartaJwsApiVersion}"
        implementation "jakarta.xml.ws:jakarta.xml.ws-api"

        testImplementation "junit:junit"
        testImplementation "org.assertj:assertj-core"
        testImplementation "org.glassfish.jaxb:jaxb-runtime"
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.mockito:mockito-junit-jupiter"
        testImplementation "org.mockito:mockito-core"
        testImplementation "org.skyscreamer:jsonassert"
        testImplementation "org.springframework:spring-test"
        testImplementation "org.xmlunit:xmlunit-core"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    }

    tasks.register('packageTests', Jar) {
        from sourceSets.test.output
        archiveClassifier.set('tests')
    }

    tasks.register('install') {
        description("Publishes artifact to local maven repository.")
        dependsOn(publishToMavenLocal)
    }

    tasks.register('createVersionPropertyFile', VersionPropertyFileTask)

    if (project.hasProperty('codeQuality')) {
        tasks.register('spotbugsIncludesAndExcludes') {
            dependsOn ":unzipBuildTools"
            spotbugsMain {
                includeFilter.set(rootProject.layout.buildDirectory.file("/build-tools/spotbugs/spotbugsIncludeFilter.xml").get().asFile)
                excludeFilter.set(rootProject.layout.buildDirectory.file("/build-tools/spotbugs/spotbugsExcludeFilter.xml").get().asFile)
            }
        }

        spotbugsMain.dependsOn('spotbugsIncludesAndExcludes')
        spotbugsMain.dependsOn(':unzipBuildTools')
        spotbugsTest.enabled(false)
        dependencies { spotbugsSlf4j "org.slf4j:slf4j-simple" }
    }

    if (project.name in ["luse", "db", "af-parent", "lisjp", "luae_fs", "luae_na", "fk7263", "ag114", "ts-bas", "ts-diabetes"]) {
        compileJava.dependsOn(":common-web:jsInclude")
    }

    if (project.name == "doi") {
        compileJava.dependsOn(":db:jsInclude")
    }

    jar { duplicatesStrategy = DuplicatesStrategy.INCLUDE }
    test { useJUnitPlatform() }
    artifacts.archives packageTests
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.dependsOn createVersionPropertyFile
    checkstyleMain.dependsOn createVersionPropertyFile

    repositories {
        mavenLocal()
        maven { url "https://nexus.drift.inera.se/repository/it-public/" }
        mavenCentral {
            content {
                excludeGroupByRegex "se\\.inera.*"
            }
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
        repositories.maven {
            url = uri("https://nexus.drift.inera.se/repository/maven-releases/")
            credentials {
                username = System.properties['ineraNexusUsername']
                password = System.properties['ineraNexusPassword']
            }
        }
    }

    idea {
        module {
            excludeDirs += file('bower_components')
            excludeDirs += file('node_modules')
            downloadJavadoc = true
        }
    }

    configurations {
        // Remove these due to conflict with Spring SAML which uses bcprov-jdk15.
        compile.exclude group: "org.bouncycastle", module: "bcpkix-jdk15on"
        compile.exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
    }
}

configure(subprojects.findAll { ['fk7263', 'ts-bas', 'ts-diabetes', 'ts-diabetes-2', 'tstrk1062', 'lisjp', 'luse', 'luae_fs', 'luae_na',
                                 'db', 'doi', 'af00213', 'af00251', 'ag114', 'ag7804', 'tstrk1009'].contains(it.name) }) {

    apply plugin: 'com.netflix.nebula.grunt'

    grunt { colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true  }

    node {
        version = "${nodeJsVersion}"
        npmVersion = "${npmVersion}"
        download = true
        distBaseUrl = 'https://nodejs.org/dist/'
        workDir = file("${projectDir}/.gradle/nodejs")
        npmWorkDir = file("${projectDir}/.gradle/npm")
        nodeModulesDir = rootProject.projectDir
    }

    tasks.register('jsInclude', NodeTask) {
        dependsOn npmInstall
        doNotTrackState "Declaring input or output directories on tasks which contain unreadable content has been deprecated."

        def webappOutputDir = 'build/'
        inputs.dir("$projectDir/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--intygModule=${project.name}",
                "--outputDir=${webappOutputDir}", "--npmDir=${rootProject.projectDir}", 'default']
    }

    tasks.register('jsCodeQuality', NodeTask) {
        dependsOn npmInstall, ':unzipBuildTools'
        outputs.upToDateWhen { false }

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--intygModule=${project.name}",
                "--npmDir=${rootProject.projectDir}", 'lint']
    }

    jar {
        exclude '**/*.scss'
        exclude '**/*.spec.js'
        exclude '**/*.test.js'
        exclude '**/karma*.conf.js'
        exclude '**/karma*.conf.ci.js'
    }

    if (project.hasProperty('codeQuality')) {
        spotbugsMain.dependsOn('jsInclude')
    }

    afterEvaluate { checkstyleMain.dependsOn jsCodeQuality }
    compileTestJava.dependsOn('jsInclude')
    checkstyleMain.dependsOn('jsInclude')
    jar.dependsOn(jsInclude)
    jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }
}

configure(subprojects.findAll { ['fk7263', 'ts-bas', 'ts-diabetes', 'tstrk1062', 'lisjp', 'af00213', 'af00251'].contains(it.name) }) {

    configurations { jstests }
    dependencies { jstests project(':common-web') }

    tasks.register('unzipWebjars', Copy) {
        dependsOn ":common-web:build"
        description 'Copies common-web from the classpath and expands it so that we can use their static resources with karma'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        into "${project.layout.buildDirectory.get().asFile}/webjars/"
        from {
            configurations.jstests.collect { zipTree(it) }
        }
    }

    tasks.register('jsTests', NodeTask) {
        dependsOn npmInstall, unzipWebjars

        def webappTestOutputDir = 'build/karma/'
        inputs.dir("${projectDir}/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappTestOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--intygModule=${project.name}",
                "--outputDir=${webappTestOutputDir}", "--npmDir=${rootProject.projectDir}", 'test']
    }

    test.dependsOn(jsTests)
}

subprojects.collect {subproject -> subproject.name }.each { subprojectName ->
    dependencies { testReportAggregation project(":${subprojectName}") }
}

tasks.register('tagRelease', TagReleaseTask)

tasks.register('unzipBuildTools', Copy) {
    into "${rootProject.layout.buildDirectory.get().asFile}/build-tools/"
    from { zipTree(project.rootProject.buildscript.configurations.classpath.find { it.name.contains("se.inera.intyg.plugin.common") }) }
}

tasks.register("applyGitHooks", Copy) {
    dependsOn("unzipBuildTools")
    def repository = IntygPluginKt.findGitRepository(project.rootProject.projectDir)
    def commitMsg = rootProject.layout.buildDirectory.file("/build-tools/git_hooks/commit-msg").get().asFile
    def preCommit = rootProject.layout.buildDirectory.file("/build-tools/git_hooks/pre-commit").get().asFile
    def toDir = Paths.get(repository.directory.path, "hooks")

    if (!Files.exists(toDir)) {
        Files.createDirectory(toDir)
    }

    IntygPluginKt.copyFile(commitMsg, toDir)
    IntygPluginKt.copyFile(preCommit, toDir)
}

applyGitHooks.dependsOn(unzipBuildTools)
